cmake_minimum_required(VERSION 3.19)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Customize binding generations
set(HEADER_FILE "${CMAKE_CURRENT_SOURCE_DIR}/src/lx16a-servo.h")
set(COMP_NAME lx16a-servo)
#--opaque-type LX16AServo
set(BIND_GEN_OPTIONS "--allowlist-type LX16AServo --allowlist-function '.*'  --no-layout-tests --use-core --ctypes-prefix=cty")
set(SOURCE_FILE_FOR_BINDGEN "all")


idf_component_register(
    SRCS "src/lx16a-servo.cpp"
    INCLUDE_DIRS "src" "include"
    REQUIRES arduino-esp32
)

# Script path (assumes it's at project root)
get_filename_component(PROJECT_ROOT "${CMAKE_SOURCE_DIR}" ABSOLUTE)

set(BINDGEN_OUT "${PROJECT_ROOT}/src/${COMP_NAME}/mod.rs")
file(MAKE_DIRECTORY "${PROJECT_ROOT}/src/${COMP_NAME}")


set(EXTRACT_SCRIPT "${PROJECT_ROOT}/extract_bindgen_flags.py")

# Outputs
set(COMPILE_COMMANDS_JSON "${CMAKE_BINARY_DIR}/compile_commands.json")
set(BINDGEN_FLAGS_FILE "${CMAKE_CURRENT_BINARY_DIR}/bindgen_flags.txt")

# === Custom command to run Python script and then bindgen ===
add_custom_command(
    OUTPUT ${BINDGEN_OUT}
    COMMAND ${CMAKE_COMMAND} -E echo "üîç Extracting flags using Python script..."
    COMMAND ${CMAKE_COMMAND} -E env python3 ${EXTRACT_SCRIPT}
            ${COMPILE_COMMANDS_JSON}
            ${SOURCE_FILE_FOR_BINDGEN}
            ${BINDGEN_FLAGS_FILE}
    COMMAND ${CMAKE_COMMAND} -E echo "‚öôÔ∏è Running bindgen..."
    COMMAND ${CMAKE_COMMAND} -E env /bin/bash -c
        "bindgen '${HEADER_FILE}' -o '${BINDGEN_OUT}' ${BIND_GEN_OPTIONS} -- --target=xtensa-esp32-none-elf -x c++ -std=c++17  \$(cat '${BINDGEN_FLAGS_FILE}')"
    DEPENDS ${HEADER_FILE} ${EXTRACT_SCRIPT}
    COMMENT "Generating Rust bindings for ${COMP_NAME}"
    VERBATIM
)



add_custom_target(${COMP_NAME}_bindgen ALL DEPENDS ${BINDGEN_OUT})
