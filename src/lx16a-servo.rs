/* automatically generated by rust-bindgen 0.71.1 */

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct HardwareSerial {
        _unused: [u8; 0],
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct LX16ABus {
        pub _address: u8,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of LX16ABus"][::std::mem::size_of::<LX16ABus>() - 1usize];
        ["Alignment of LX16ABus"][::std::mem::align_of::<LX16ABus>() - 1usize];
    };
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABus5debugEb"]
        pub fn LX16ABus_debug(this: *mut root::LX16ABus, on: bool);
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABus5beginEP14HardwareSerialii"]
        pub fn LX16ABus_begin(
            this: *mut root::LX16ABus,
            port: *mut root::HardwareSerial,
            tXpin: ::std::os::raw::c_int,
            TXFlagGPIO: ::std::os::raw::c_int,
        );
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABus15beginOnePinModeEP14HardwareSeriali"]
        pub fn LX16ABus_beginOnePinMode(
            this: *mut root::LX16ABus,
            port: *mut root::HardwareSerial,
            tXrXpin: ::std::os::raw::c_int,
        );
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABus9availableEv"]
        pub fn LX16ABus_available(this: *mut root::LX16ABus) -> bool;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABus4readEv"]
        pub fn LX16ABus_read(this: *mut root::LX16ABus) -> ::std::os::raw::c_int;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABus5writeEPKhi"]
        pub fn LX16ABus_write(
            this: *mut root::LX16ABus,
            buf: *const u8,
            buflen: ::std::os::raw::c_int,
        );
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABus4timeEm"]
        pub fn LX16ABus_time(this: *mut root::LX16ABus, n: u32) -> u32;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABus6timeusEm"]
        pub fn LX16ABus_timeus(this: *mut root::LX16ABus, n: u32) -> u32;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABus5writeEhPKhih"]
        pub fn LX16ABus_write1(
            this: *mut root::LX16ABus,
            cmd: u8,
            params: *const u8,
            param_cnt: ::std::os::raw::c_int,
            MYID: u8,
        ) -> bool;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABus4readEhPhih"]
        pub fn LX16ABus_read1(
            this: *mut root::LX16ABus,
            cmd: u8,
            params: *mut u8,
            param_len: ::std::os::raw::c_int,
            MYID: u8,
        ) -> bool;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABus14write_no_retryEhPKhih"]
        pub fn LX16ABus_write_no_retry(
            this: *mut root::LX16ABus,
            cmd: u8,
            params: *const u8,
            param_cnt: ::std::os::raw::c_int,
            MYID: u8,
        ) -> bool;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABus13read_no_retryEhPhih"]
        pub fn LX16ABus_read_no_retry(
            this: *mut root::LX16ABus,
            cmd: u8,
            params: *mut u8,
            param_len: ::std::os::raw::c_int,
            MYID: u8,
        ) -> bool;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABus3rcvEhPhih"]
        pub fn LX16ABus_rcv(
            this: *mut root::LX16ABus,
            cmd: u8,
            params: *mut u8,
            param_len: ::std::os::raw::c_int,
            MYID: u8,
        ) -> bool;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABus13setRetryCountEi"]
        pub fn LX16ABus_setRetryCount(this: *mut root::LX16ABus, count: ::std::os::raw::c_int);
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABus10disableAllEv"]
        pub fn LX16ABus_disableAll(this: *mut root::LX16ABus) -> bool;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABus9enableAllEv"]
        pub fn LX16ABus_enableAll(this: *mut root::LX16ABus) -> bool;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABus15move_sync_startEv"]
        pub fn LX16ABus_move_sync_start(this: *mut root::LX16ABus) -> bool;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABus7stopAllEv"]
        pub fn LX16ABus_stopAll(this: *mut root::LX16ABus);
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABus7id_readEv"]
        pub fn LX16ABus_id_read(this: *mut root::LX16ABus) -> u8;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABus8id_writeEh"]
        pub fn LX16ABus_id_write(this: *mut root::LX16ABus, id: u8);
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN8LX16ABusC1Ev"]
        pub fn LX16ABus_LX16ABus(this: *mut root::LX16ABus);
    }
    impl LX16ABus {
        #[inline]
        pub unsafe fn debug(&mut self, on: bool) {
            LX16ABus_debug(self, on)
        }
        #[inline]
        pub unsafe fn begin(
            &mut self,
            port: *mut root::HardwareSerial,
            tXpin: ::std::os::raw::c_int,
            TXFlagGPIO: ::std::os::raw::c_int,
        ) {
            LX16ABus_begin(self, port, tXpin, TXFlagGPIO)
        }
        #[inline]
        pub unsafe fn beginOnePinMode(
            &mut self,
            port: *mut root::HardwareSerial,
            tXrXpin: ::std::os::raw::c_int,
        ) {
            LX16ABus_beginOnePinMode(self, port, tXrXpin)
        }
        #[inline]
        pub unsafe fn available(&mut self) -> bool {
            LX16ABus_available(self)
        }
        #[inline]
        pub unsafe fn read(&mut self) -> ::std::os::raw::c_int {
            LX16ABus_read(self)
        }
        #[inline]
        pub unsafe fn write(&mut self, buf: *const u8, buflen: ::std::os::raw::c_int) {
            LX16ABus_write(self, buf, buflen)
        }
        #[inline]
        pub unsafe fn time(&mut self, n: u32) -> u32 {
            LX16ABus_time(self, n)
        }
        #[inline]
        pub unsafe fn timeus(&mut self, n: u32) -> u32 {
            LX16ABus_timeus(self, n)
        }
        #[inline]
        pub unsafe fn write1(
            &mut self,
            cmd: u8,
            params: *const u8,
            param_cnt: ::std::os::raw::c_int,
            MYID: u8,
        ) -> bool {
            LX16ABus_write1(self, cmd, params, param_cnt, MYID)
        }
        #[inline]
        pub unsafe fn read1(
            &mut self,
            cmd: u8,
            params: *mut u8,
            param_len: ::std::os::raw::c_int,
            MYID: u8,
        ) -> bool {
            LX16ABus_read1(self, cmd, params, param_len, MYID)
        }
        #[inline]
        pub unsafe fn write_no_retry(
            &mut self,
            cmd: u8,
            params: *const u8,
            param_cnt: ::std::os::raw::c_int,
            MYID: u8,
        ) -> bool {
            LX16ABus_write_no_retry(self, cmd, params, param_cnt, MYID)
        }
        #[inline]
        pub unsafe fn read_no_retry(
            &mut self,
            cmd: u8,
            params: *mut u8,
            param_len: ::std::os::raw::c_int,
            MYID: u8,
        ) -> bool {
            LX16ABus_read_no_retry(self, cmd, params, param_len, MYID)
        }
        #[inline]
        pub unsafe fn rcv(
            &mut self,
            cmd: u8,
            params: *mut u8,
            param_len: ::std::os::raw::c_int,
            MYID: u8,
        ) -> bool {
            LX16ABus_rcv(self, cmd, params, param_len, MYID)
        }
        #[inline]
        pub unsafe fn setRetryCount(&mut self, count: ::std::os::raw::c_int) {
            LX16ABus_setRetryCount(self, count)
        }
        #[inline]
        pub unsafe fn disableAll(&mut self) -> bool {
            LX16ABus_disableAll(self)
        }
        #[inline]
        pub unsafe fn enableAll(&mut self) -> bool {
            LX16ABus_enableAll(self)
        }
        #[inline]
        pub unsafe fn move_sync_start(&mut self) -> bool {
            LX16ABus_move_sync_start(self)
        }
        #[inline]
        pub unsafe fn stopAll(&mut self) {
            LX16ABus_stopAll(self)
        }
        #[inline]
        pub unsafe fn id_read(&mut self) -> u8 {
            LX16ABus_id_read(self)
        }
        #[inline]
        pub unsafe fn id_write(&mut self, id: u8) {
            LX16ABus_id_write(self, id)
        }
        #[inline]
        pub unsafe fn new() -> Self {
            let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
            LX16ABus_LX16ABus(__bindgen_tmp.as_mut_ptr());
            __bindgen_tmp.assume_init()
        }
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct LX16AServo {
        pub staticOffset: i32,
        pub maxCentDegrees: i32,
        pub minCentDegrees: i32,
        pub _id: u8,
    }
    #[allow(clippy::unnecessary_operation, clippy::identity_op)]
    const _: () = {
        ["Size of LX16AServo"][::std::mem::size_of::<LX16AServo>() - 32usize];
        ["Alignment of LX16AServo"][::std::mem::align_of::<LX16AServo>() - 8usize];
        ["Offset of field: LX16AServo::staticOffset"]
            [::std::mem::offset_of!(LX16AServo, staticOffset) - 0usize];
        ["Offset of field: LX16AServo::maxCentDegrees"]
            [::std::mem::offset_of!(LX16AServo, maxCentDegrees) - 8usize];
        ["Offset of field: LX16AServo::minCentDegrees"]
            [::std::mem::offset_of!(LX16AServo, minCentDegrees) - 16usize];
        ["Offset of field: LX16AServo::_id"][::std::mem::offset_of!(LX16AServo, _id) - 24usize];
    };
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServo10initializeEv"]
        pub fn LX16AServo_initialize(this: *mut root::LX16AServo);
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServo11isCommandOkEv"]
        pub fn LX16AServo_isCommandOk(this: *mut root::LX16AServo) -> bool;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServo9calibrateElll"]
        pub fn LX16AServo_calibrate(
            this: *mut root::LX16AServo,
            currentAngleCentDegrees: i32,
            min_angle_cent_deg: i32,
            max_angle_cent_deg: i32,
        ) -> bool;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServo14setLimitsTicksEll"]
        pub fn LX16AServo_setLimitsTicks(this: *mut root::LX16AServo, lower: i32, upper: i32);
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServo10readLimitsEv"]
        pub fn LX16AServo_readLimits(this: *mut root::LX16AServo);
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServo17getMinCentDegreesEv"]
        pub fn LX16AServo_getMinCentDegrees(this: *mut root::LX16AServo) -> i32;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServo17getMaxCentDegreesEv"]
        pub fn LX16AServo_getMaxCentDegrees(this: *mut root::LX16AServo) -> i32;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServo9move_timeElt"]
        pub fn LX16AServo_move_time(this: *mut root::LX16AServo, angle: i32, time: u16);
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServo27move_time_and_wait_for_syncElt"]
        pub fn LX16AServo_move_time_and_wait_for_sync(
            this: *mut root::LX16AServo,
            angle: i32,
            time: u16,
        );
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServo4stopEv"]
        pub fn LX16AServo_stop(this: *mut root::LX16AServo);
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServo7disableEv"]
        pub fn LX16AServo_disable(this: *mut root::LX16AServo);
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServo6enableEv"]
        pub fn LX16AServo_enable(this: *mut root::LX16AServo);
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServo10motor_modeEs"]
        pub fn LX16AServo_motor_mode(this: *mut root::LX16AServo, speed: i16);
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServo8pos_readEv"]
        pub fn LX16AServo_pos_read(this: *mut root::LX16AServo) -> i32;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServo15pos_read_cachedEv"]
        pub fn LX16AServo_pos_read_cached(this: *mut root::LX16AServo) -> i32;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServo19angle_offset_adjustEs"]
        pub fn LX16AServo_angle_offset_adjust(this: *mut root::LX16AServo, angle: i16);
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServo17angle_offset_saveEv"]
        pub fn LX16AServo_angle_offset_save(this: *mut root::LX16AServo);
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServo17read_angle_offsetEv"]
        pub fn LX16AServo_read_angle_offset(this: *mut root::LX16AServo) -> i16;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServo7id_readEv"]
        pub fn LX16AServo_id_read(this: *mut root::LX16AServo) -> u8;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServo9id_verifyEv"]
        pub fn LX16AServo_id_verify(this: *mut root::LX16AServo) -> u8;
    }
    unsafe extern "C" {
        #[link_name = "\u{1}_ZN10LX16AServoC1EP8LX16ABusi"]
        pub fn LX16AServo_LX16AServo(
            this: *mut root::LX16AServo,
            bus: *mut root::LX16ABus,
            id: ::std::os::raw::c_int,
        );
    }
    impl LX16AServo {
        #[inline]
        pub unsafe fn initialize(&mut self) {
            LX16AServo_initialize(self)
        }
        #[inline]
        pub unsafe fn isCommandOk(&mut self) -> bool {
            LX16AServo_isCommandOk(self)
        }
        #[inline]
        pub unsafe fn calibrate(
            &mut self,
            currentAngleCentDegrees: i32,
            min_angle_cent_deg: i32,
            max_angle_cent_deg: i32,
        ) -> bool {
            LX16AServo_calibrate(
                self,
                currentAngleCentDegrees,
                min_angle_cent_deg,
                max_angle_cent_deg,
            )
        }
        #[inline]
        pub unsafe fn setLimitsTicks(&mut self, lower: i32, upper: i32) {
            LX16AServo_setLimitsTicks(self, lower, upper)
        }
        #[inline]
        pub unsafe fn readLimits(&mut self) {
            LX16AServo_readLimits(self)
        }
        #[inline]
        pub unsafe fn getMinCentDegrees(&mut self) -> i32 {
            LX16AServo_getMinCentDegrees(self)
        }
        #[inline]
        pub unsafe fn getMaxCentDegrees(&mut self) -> i32 {
            LX16AServo_getMaxCentDegrees(self)
        }
        #[inline]
        pub unsafe fn move_time(&mut self, angle: i32, time: u16) {
            LX16AServo_move_time(self, angle, time)
        }
        #[inline]
        pub unsafe fn move_time_and_wait_for_sync(&mut self, angle: i32, time: u16) {
            LX16AServo_move_time_and_wait_for_sync(self, angle, time)
        }
        #[inline]
        pub unsafe fn stop(&mut self) {
            LX16AServo_stop(self)
        }
        #[inline]
        pub unsafe fn disable(&mut self) {
            LX16AServo_disable(self)
        }
        #[inline]
        pub unsafe fn enable(&mut self) {
            LX16AServo_enable(self)
        }
        #[inline]
        pub unsafe fn motor_mode(&mut self, speed: i16) {
            LX16AServo_motor_mode(self, speed)
        }
        #[inline]
        pub unsafe fn pos_read(&mut self) -> i32 {
            LX16AServo_pos_read(self)
        }
        #[inline]
        pub unsafe fn pos_read_cached(&mut self) -> i32 {
            LX16AServo_pos_read_cached(self)
        }
        #[inline]
        pub unsafe fn angle_offset_adjust(&mut self, angle: i16) {
            LX16AServo_angle_offset_adjust(self, angle)
        }
        #[inline]
        pub unsafe fn angle_offset_save(&mut self) {
            LX16AServo_angle_offset_save(self)
        }
        #[inline]
        pub unsafe fn read_angle_offset(&mut self) -> i16 {
            LX16AServo_read_angle_offset(self)
        }
        #[inline]
        pub unsafe fn id_read(&mut self) -> u8 {
            LX16AServo_id_read(self)
        }
        #[inline]
        pub unsafe fn id_verify(&mut self) -> u8 {
            LX16AServo_id_verify(self)
        }
        #[inline]
        pub unsafe fn new(bus: *mut root::LX16ABus, id: ::std::os::raw::c_int) -> Self {
            let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
            LX16AServo_LX16AServo(__bindgen_tmp.as_mut_ptr(), bus, id);
            __bindgen_tmp.assume_init()
        }
    }
}
